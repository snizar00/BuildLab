Use GitHub codespace and build a PCF control:
---------------------------------------------
•	Log-in to GitHub, create a new workspace then create a new Codespace.
•	Install Extension Power Platform Tools (PAC CLI).

Click on Extensions  >  Search “Power Platform Tools”  >  click Install.
•	In the Codespace terminal, type 'pac' to test installation of Power Platform Tools.
•	Create a connection with Power Platform.

	pac auth create -dc
	
Copy code and go to the link to validate login.

Create and build a code component:
----------------------------------
This article demonstrates how to create and deploy code components using Microsoft Power Platform CLI.

In the Codespace terminal, type:
	pac org list
	pac org select -env <ENVIRONMENT URL>
	pac org who
	clear
	mkdir solutions
	mkdir controls
	cd solutions
	mkdir MySolution

To create and import a solution file:
1.	Create two new folders inside the lab folder path:

	mkdir controls
	mkdir solutions

2.	Navigate into the directory to create additional folder MySolution: 

	cd solutions
	mkdir MySolution

3.	Navigate into the MySolution directory. 
4.	Create a new solution project using the command below. The solution project is used for bundling the code component into a solution zip file that is used for importing into Dataverse.

	pac solution init -pp mysol -pn MySolution -o ./.
	ls -l
	
5.	Navigate into the controls directory and create folder for the PCF control. 

	cd controls 
	mkdir DisplayInputText
	cd DisplayInputText
	
6.	Create a new solution project using the command below.

	pac pcf init -ns DisplayInputText -n DisplayInputText -o ./. -npm --template field
	
7.	Start the test for the blank solution using the commands below. 

	npm run build
	npm start
	NOTE: If the web page does not show anything, just refresh (F5) the page.

8.	Once verified, close the browser tab with blank solution test and come back to Codespace and press Ctrl-C to close the process.
9.	Navigate to controls folder and type:

	cd DisplayInputText
	mkdir css
	mkdir strings
	
	NOTE:
	1.	Copy the file DisplayInputText.css from the lab folder into css folder.
	2.	Copy the file DisplayInputText.1033.resx from the lab folder into strings folder.
	3.	Copy the contents of the file index.ts from the lab folder into controls/DisplayInputText/DisplayInputText/index.ts file.

10.	Navigate into the DisplayInputText directory within controls directory and type.

	npm run build
	npm start
	
11.	Once verified, close the browser tab with PCF Code test and come back to Codespace and press Ctrl-C to close the process.
12.	Navigate into the mysolution directory within solutions directory. Then use the command below to add reference to the control.

	pac solution add-reference --path ../../controls/DisplayInputText/
	
13.	Create the build while in mysolution directory using the command: 

	dotnet build
	
14.	Ensure you are connected with Power Platform environments by using the below set of commands.

	pac org who

NOTE: If you do not see Org URL/user email/etc then log-in using

	pac auth create
	pac org list
	pac org select -env <DEV_ENVIRONMENT_URL>

Push Code Component into a DEV environment.
------------------------------------------
1.	Navigate into the PCF Control directory: 

	cd solutions
	cd MySolution
2.	In In the explorer blade, open solutions/MySolution/bin/Debug/
3.	You should see MySolution.zip 
4.	Open src/Other folder to view the below XML files.

	Customizations.xml
	Relationships.xml
	Solution.xml
	Solution.xml has actually received information because we associated the PCF control directly into the solution, so it has that reference.

5.	Navigate to MySolution folder and type below command to import solution into Dev environment.

	pac solution import --path ./bin/Debug/MySolution.zip

6.	Open maker portal  >  Select Dev Environment  >  Click Solutions  >  You can see the solution.
7.	Click MySolution  >  you should see the custom control.

Add components to a Canvas App
------------------------------
1.	Go to Power Apps Studio.
2.	Create a new Canvas app to add the code component.
	NOTE: Make sure the solution .zip file containing the code components has already been imported into Microsoft Dataverse before you proceed to the next step.
3.	On the left pane, select Add (+), and then select Get more components. You can also add components by selecting Insert > Custom > Import component.
4.	Select the Code tab, select a component from the list, and then select Import.
5.	On the left pane, select +, expand Code components, and then select the component to add it to the app.

*** IMPORTANT ***
Make sure to change the Environment Setting (for both environments in PPAC) using PRODUCT  >  FEATURES to allow import of components to Canvas apps.

Power Apps component framework for canvas apps  >  Allow publishing of canvas apps with code components.
5. Add the PCF control to an app in your solution. 

Create a new Canvas app.
------------------------
	Click New App  >  select Canvas app  >  call it TestPCFApp  >  click Create  >  click Skip
	Click Components  >  select Import components  >  click Code  >  select DisplayInputText  >  click Import. 
	Click Tree view  >  select Screens  >  click Insert  >  select Text Label  >  Adjust size (1290x83)  >  Font size (20)  >  Font weight (Bold)  >  Text alignment (Center)  >  Text (BuildLab PCF Test)
	Click Insert  >  select Code components  >  select DisplayInputText  >  select Center  >  Adjust size  >  click Save  >  click Play  >  Test  >  click Publish  >  click Close  >  click Back  >  leave.

Create App registration in Azure portal.
---------------------------------------
Create App Registration
1.	Go to Azure portal (https://portal.azure.com)
2.	Select Azure Active Directory
3.	Select App Registration from the left blade.
4.	Select New registration
5.	Type BuildLabRegistration  >  click Register, write down/save below items.
	Application (client) ID:	GUID
	Object ID:			GUID
	Directory (tenant) ID:		GUID
	
6.	Click Manifest  >  Change "allowPublicClient" to TRUE  >  click Save
7.	Click API Permissions  >  click Add a permission  >  select APIs my organization uses  >  type Dataverse  >  click Delegate permissions  >  click user_impersonation  >  click Add permissions.
8.	Click API Permissions  >  click Add a permission  >  select APIs my organization uses  >  select PowerApps-Advisor  >  click Delegate permissions  >  click user_impersonation  >  click Add permissions.
9.	Click API Permissions  >  click Add a permission  >  select APIs my organization uses  >  select PowerApps Service  >  click Delegate permissions  >  click user_impersonation  >  click Add permissions.
10.	Select Certificates & secrets  >  click New client secret  >  type BuildLabSecret  >  select 90 days (3-months)  >  click Add, , write down/save (Name, Value, Secret ID)

Export the new app with PCF control to GitHub.
----------------------------------------------
Go to GitHub web page, click Settings  >  select Secrets and variables  >  select Actions  >  click New repository secret  >  Set name as PowerPlatformSPN  >  Paste Value (step-10 from App registration) into Secret  >  click Add secret.

Click on <> Code  > click Actions  >  select set up a workflow yourself  >  Copy export-and-branch-solution.yml  from the lab folder  >  change line-12 (default: MySolution)  >  click Commit changes   >  click Commit changes. 

Click on Actions   >  click on export-and-branch-solution   >  select Run workflow.

Create a Pull request.
----------------------
Once the workflow (export-and-branch-solution) completes, Click on Pull request  >  select the branch that was just created  >  click Create pull request  >  click Create pull request  >  select Merge pull request  >  click Confirm merge.

To confirm:
Click on <> Code  >  click on solutions  >  click MySolution  >  click Other  >  you shall see XML files (Customizations.xml & Solution.xml, etc.)


Have a GitHub workflow to deploy from Dev to Test
-------------------------------------------------
Click on <> Code  >  click Actions  >  click set up a workflow yourself  >  Copy Release-SolutionToProd.yml  from the lab folder  >  Apply changes for DEV/TEST environments, Solution name, TenantID, ClientID  >  click Commit changes   >  click Commit changes.

Click on Actions   >  click on Release to prod action  >  select Run workflow.

The last workflow consists of two parts, (a) convert-to-managed and (b) release-to-prod. 
RESULT: Your solution shall be released to Test environment, and it will be a managed solution.
